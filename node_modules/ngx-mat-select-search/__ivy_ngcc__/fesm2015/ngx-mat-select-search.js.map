{"version":3,"file":"ngx-mat-select-search.js","sources":["ngx-mat-select-search/mat-select-search-clear.directive.ts","ngx-mat-select-search/mat-select-search.component.ts","ngx-mat-select-search/ngx-mat-select-search.module.ts","ngx-mat-select-search/ngx-mat-select-search.ts"],"names":["tslib_1.__decorate","tslib_1.__param"],"mappings":"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","sourcesContent":["import { Directive } from '@angular/core';\n\n/**\n * Directive for providing a custom clear-icon.\n * e.g.\n * <ngx-mat-select-search [formControl]=\"bankFilterCtrl\">\n *   <mat-icon ngxMatSelectSearchClear>delete</mat-icon>\n * </ngx-mat-select-search>\n */\n@Directive({\n    selector: '[ngxMatSelectSearchClear]'\n})\nexport class MatSelectSearchClearDirective {}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport {\n  ChangeDetectionStrategy,\n  ChangeDetectorRef,\n  Component,\n  ContentChild,\n  ElementRef,\n  EventEmitter,\n  forwardRef,\n  HostBinding,\n  Inject,\n  Input,\n  OnDestroy,\n  OnInit,\n  Optional,\n  Output,\n  QueryList,\n  ViewChild\n} from '@angular/core';\nimport { ControlValueAccessor, FormControl, NG_VALUE_ACCESSOR } from '@angular/forms';\nimport { _countGroupLabelsBeforeOption, MatOption } from '@angular/material/core';\nimport { MatSelect } from '@angular/material/select';\nimport { MatFormField } from '@angular/material/form-field';\nimport { A, DOWN_ARROW, END, ENTER, ESCAPE, HOME, NINE, SPACE, UP_ARROW, Z, ZERO, } from '@angular/cdk/keycodes';\nimport { ViewportRuler } from '@angular/cdk/scrolling';\nimport { LiveAnnouncer } from '@angular/cdk/a11y';\nimport { BehaviorSubject, combineLatest, Observable, of, Subject } from 'rxjs';\nimport { delay, filter, map, startWith, switchMap, take, takeUntil, tap } from 'rxjs/operators';\n\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\n\n/** The max height of the select's overlay panel. */\nconst SELECT_PANEL_MAX_HEIGHT = 256;\n\n/* tslint:disable:member-ordering component-selector */\n/**\n * Component providing an input field for searching MatSelect options.\n *\n * Example usage:\n *\n * interface Bank {\n *  id: string;\n *  name: string;\n * }\n *\n * @Component({\n *   selector: 'my-app-data-selection',\n *   template: `\n *     <mat-form-field>\n *       <mat-select [formControl]=\"bankCtrl\" placeholder=\"Bank\">\n *         <mat-option>\n *           <ngx-mat-select-search [formControl]=\"bankFilterCtrl\"></ngx-mat-select-search>\n *         </mat-option>\n *         <mat-option *ngFor=\"let bank of filteredBanks | async\" [value]=\"bank.id\">\n *           {{bank.name}}\n *         </mat-option>\n *       </mat-select>\n *     </mat-form-field>\n *   `\n * })\n * export class DataSelectionComponent implements OnInit, OnDestroy {\n *\n *   // control for the selected bank\n *   public bankCtrl: FormControl = new FormControl();\n *   // control for the MatSelect filter keyword\n *   public bankFilterCtrl: FormControl = new FormControl();\n *\n *   // list of banks\n *   private banks: Bank[] = [{name: 'Bank A', id: 'A'}, {name: 'Bank B', id: 'B'}, {name: 'Bank C', id: 'C'}];\n *   // list of banks filtered by search keyword\n *   public filteredBanks: ReplaySubject<Bank[]> = new ReplaySubject<Bank[]>(1);\n *\n *   // Subject that emits when the component has been destroyed.\n *   private _onDestroy = new Subject<void>();\n *\n *\n *   ngOnInit() {\n *     // load the initial bank list\n *     this.filteredBanks.next(this.banks.slice());\n *     // listen for search field value changes\n *     this.bankFilterCtrl.valueChanges\n *       .pipe(takeUntil(this._onDestroy))\n *       .subscribe(() => {\n *         this.filterBanks();\n *       });\n *   }\n *\n *   ngOnDestroy() {\n *     this._onDestroy.next();\n *     this._onDestroy.complete();\n *   }\n *\n *   private filterBanks() {\n *     if (!this.banks) {\n *       return;\n *     }\n *\n *     // get the search keyword\n *     let search = this.bankFilterCtrl.value;\n *     if (!search) {\n *       this.filteredBanks.next(this.banks.slice());\n *       return;\n *     } else {\n *       search = search.toLowerCase();\n *     }\n *\n *     // filter the banks\n *     this.filteredBanks.next(\n *       this.banks.filter(bank => bank.name.toLowerCase().indexOf(search) > -1)\n *     );\n *   }\n * }\n */\n@Component({\n  selector: 'ngx-mat-select-search',\n  templateUrl: './mat-select-search.component.html',\n  styleUrls: ['./mat-select-search.component.scss'],\n  providers: [\n    {\n      provide: NG_VALUE_ACCESSOR,\n      useExisting: forwardRef(() => MatSelectSearchComponent),\n      multi: true\n    }\n  ],\n  changeDetection: ChangeDetectionStrategy.OnPush\n})\nexport class MatSelectSearchComponent implements OnInit, OnDestroy, ControlValueAccessor {\n\n  /** Label of the search placeholder */\n  @Input() placeholderLabel = 'Suche';\n\n  /** Type of the search input field */\n  @Input() type = 'text';\n\n  /** Label to be shown when no entries are found. Set to null if no message should be shown. */\n  @Input() noEntriesFoundLabel = 'Keine Optionen gefunden';\n\n  /**\n   *  Text that is appended to the currently active item label announced by screen readers,\n   *  informing the user of the current index, value and total options.\n   *  eg: Bank R (Germany) 1 of 6\n  */\n  @Input() indexAndLengthScreenReaderText = ' of ';\n\n  /**\n    * Whether or not the search field should be cleared after the dropdown menu is closed.\n    * Useful for server-side filtering. See [#3](https://github.com/bithost-gmbh/ngx-mat-select-search/issues/3)\n    */\n  @Input() clearSearchInput = true;\n\n  /** Whether to show the search-in-progress indicator */\n  @Input() searching = false;\n\n  /** Disables initial focusing of the input field */\n  @Input() disableInitialFocus = false;\n\n  /** Enable clear input on escape pressed */\n  @Input() enableClearOnEscapePressed = false;\n\n  /**\n   * Prevents home / end key being propagated to mat-select,\n   * allowing to move the cursor within the search input instead of navigating the options\n   */\n  @Input() preventHomeEndKeyPropagation = false;\n\n  /** Disables scrolling to active options when option list changes. Useful for server-side search */\n  @Input() disableScrollToActiveOnOptionsChanged = false;\n\n  /** Adds 508 screen reader support for search box */\n  @Input() ariaLabel = 'dropdown search';\n\n  /** Whether to show Select All Checkbox (for mat-select[multi=true]) */\n  @Input() showToggleAllCheckbox = false;\n\n  /** select all checkbox checked state */\n  @Input() toggleAllCheckboxChecked = false;\n\n  /** select all checkbox indeterminate state */\n  @Input() toggleAllCheckboxIndeterminate = false;\n\n  /** Display a message in a tooltip on the toggle-all checkbox */\n  @Input() toggleAllCheckboxTooltipMessage = '';\n\n  /** Define the position of the tooltip on the toggle-all checkbox. */\n  @Input() toogleAllCheckboxTooltipPosition: 'left' | 'right' | 'above' | 'below' | 'before' | 'after' = 'below';\n\n  /** Show/Hide the search clear button of the search input */\n  @Input() hideClearSearchButton = false;\n\n  /**\n   * Always restore selected options on selectionChange for mode multi (e.g. for lazy loading/infinity scrolling).\n   * Defaults to false, so selected options are only restored while filtering is active.\n   */\n  @Input() alwaysRestoreSelectedOptionsMulti = false;\n\n  /** Output emitter to send to parent component with the toggle all boolean */\n  @Output() toggleAll = new EventEmitter<boolean>();\n\n  /** Reference to the search input field */\n  @ViewChild('searchSelectInput', { read: ElementRef, static: true }) searchSelectInput: ElementRef;\n\n  /** Reference to the search input field */\n  @ViewChild('innerSelectSearch', { read: ElementRef, static: true }) innerSelectSearch: ElementRef;\n\n  /** Reference to custom search input clear icon */\n  @ContentChild(MatSelectSearchClearDirective, { static: false }) clearIcon: MatSelectSearchClearDirective;\n\n  @HostBinding('class.mat-select-search-inside-mat-option')\n  get isInsideMatOption(): boolean {\n    return !!this.matOption;\n  }\n\n  /** Current search value */\n  get value(): string {\n    return this._formControl.value;\n  }\n  private _lastExternalInputValue: string;\n\n  onTouched: Function = (_: any) => { };\n\n  /** Reference to the MatSelect options */\n  public set _options(_options: QueryList<MatOption>) {\n    this._options$.next(_options);\n  }\n  public get _options(): QueryList<MatOption> {\n    return this._options$.getValue();\n  }\n  public _options$: BehaviorSubject<QueryList<MatOption>> = new BehaviorSubject<QueryList<MatOption>>(null);\n\n  private optionsList$: Observable<MatOption[]> = this._options$.pipe(\n    switchMap(_options => _options ?\n      _options.changes.pipe(\n        map(options => options.toArray()),\n        startWith<MatOption[]>(_options.toArray()),\n      ) : of(null)\n    )\n  );\n\n  private optionsLength$: Observable<number> = this.optionsList$.pipe(\n    map(options => options ? options.length : 0)\n  );\n\n  /** Previously selected values when using <mat-select [multiple]=\"true\">*/\n  private previousSelectedValues: any[];\n\n  public _formControl: FormControl = new FormControl('');\n\n  /** whether to show the no entries found message */\n  public _showNoEntriesFound$: Observable<boolean> = combineLatest([\n    this._formControl.valueChanges,\n    this.optionsLength$\n  ]).pipe(\n    map(([value, optionsLength]) => this.noEntriesFoundLabel && value\n      && optionsLength === this.getOptionsLengthOffset())\n  );\n\n  /** Subject that emits when the component has been destroyed. */\n  private _onDestroy = new Subject<void>();\n\n\n  constructor(@Inject(MatSelect) public matSelect: MatSelect,\n    public changeDetectorRef: ChangeDetectorRef,\n    private _viewportRuler: ViewportRuler,\n    @Optional() @Inject(MatOption) public matOption: MatOption = null,\n    private liveAnnouncer: LiveAnnouncer,\n    @Optional() @Inject(MatFormField) public matFormField: MatFormField = null\n  ) {\n  }\n\n  ngOnInit() {\n    // set custom panel class\n    const panelClass = 'mat-select-search-panel';\n    if (this.matSelect.panelClass) {\n      if (Array.isArray(this.matSelect.panelClass)) {\n        (<string[]>this.matSelect.panelClass).push(panelClass);\n      } else if (typeof this.matSelect.panelClass === 'string') {\n        this.matSelect.panelClass = [this.matSelect.panelClass, panelClass];\n      } else if (typeof this.matSelect.panelClass === 'object') {\n        this.matSelect.panelClass[panelClass] = true;\n      }\n    } else {\n      this.matSelect.panelClass = panelClass;\n    }\n\n    // set custom mat-option class if the component was placed inside a mat-option\n    if (this.matOption) {\n      this.matOption.disabled = true;\n      this.matOption._getHostElement().classList.add('contains-mat-select-search');\n    } else {\n      console.error('<ngx-mat-select-search> must be placed inside a <mat-option> element');\n    }\n\n    // when the select dropdown panel is opened or closed\n    this.matSelect.openedChange\n      .pipe(\n        delay(1),\n        takeUntil(this._onDestroy)\n      )\n      .subscribe((opened) => {\n        if (opened) {\n          this.updateInputWidth();\n          // focus the search field when opening\n          if (!this.disableInitialFocus) {\n            this._focus();\n          }\n        } else {\n          // clear it when closing\n          if (this.clearSearchInput) {\n            this._reset();\n          }\n        }\n      });\n\n\n\n    // set the first item active after the options changed\n    this.matSelect.openedChange\n      .pipe(take(1))\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect._keyManager) {\n          this.matSelect._keyManager.change.pipe(takeUntil(this._onDestroy))\n            .subscribe(() => this.adjustScrollTopToFitActiveOptionIntoView());\n        } else {\n          console.log('_keyManager was not initialized.');\n        }\n\n        this._options = this.matSelect.options;\n\n        // Closure variable for tracking the most recent first option.\n        // In order to avoid avoid causing the list to\n        // scroll to the top when options are added to the bottom of\n        // the list (eg: infinite scroll), we compare only\n        // the changes to the first options to determine if we\n        // should set the first item as active.\n        // This prevents unnecessary scrolling to the top of the list\n        // when options are appended, but allows the first item\n        // in the list to be set as active by default when there\n        // is no active selection\n        let previousFirstOption = this._options.toArray()[this.getOptionsLengthOffset()];\n\n        this._options.changes\n          .pipe(\n            takeUntil(this._onDestroy)\n          )\n          .subscribe(() => {\n            // avoid \"expression has been changed\" error\n            setTimeout(() => {\n              // Convert the QueryList to an array\n              const options = this._options.toArray();\n\n              // The true first item is offset by 1\n              const currentFirstOption = options[this.getOptionsLengthOffset()];\n\n              const keyManager = this.matSelect._keyManager;\n              if (keyManager && this.matSelect.panelOpen) {\n\n                // set first item active and input width\n\n                // Check to see if the first option in these changes is different from the previous.\n                const firstOptionIsChanged = !this.matSelect.compareWith(previousFirstOption, currentFirstOption);\n\n                // CASE: The first option is different now.\n                // Indiciates we should set it as active and scroll to the top.\n                if (firstOptionIsChanged\n                  || !keyManager.activeItem\n                  || !options.find(option => this.matSelect.compareWith(option, keyManager.activeItem))) {\n                  keyManager.setFirstItemActive();\n                }\n\n                // wait for panel width changes\n                setTimeout(() => {\n                  this.updateInputWidth();\n                });\n\n                if (!this.disableScrollToActiveOnOptionsChanged) {\n                  this.adjustScrollTopToFitActiveOptionIntoView();\n                }\n              }\n\n              // Update our reference\n              previousFirstOption = currentFirstOption;\n            });\n          });\n      });\n\n    // add or remove css class depending on whether to show the no entries found message\n    // note: this is hacky\n    this._showNoEntriesFound$.pipe(\n      takeUntil(this._onDestroy)\n    ).subscribe(showNoEntriesFound => {\n      // set no entries found class on mat option\n      if (this.matOption) {\n        if (showNoEntriesFound) {\n          this.matOption._getHostElement().classList.add('mat-select-search-no-entries-found');\n        } else {\n          this.matOption._getHostElement().classList.remove('mat-select-search-no-entries-found');\n        }\n      }\n    });\n\n    // resize the input width when the viewport is resized, i.e. the trigger width could potentially be resized\n    this._viewportRuler.change()\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe(() => {\n        if (this.matSelect.panelOpen) {\n          this.updateInputWidth();\n        }\n      });\n\n    this.initMultipleHandling();\n\n    this.optionsList$.pipe(\n      takeUntil(this._onDestroy)\n    ).subscribe(() => {\n      // update view when available options change\n      this.changeDetectorRef.markForCheck();\n    });\n  }\n\n  _emitSelectAllBooleanToParent(state: boolean) {\n    this.toggleAll.emit(state);\n  }\n\n  ngOnDestroy() {\n    this._onDestroy.next();\n    this._onDestroy.complete();\n  }\n\n  _isToggleAllCheckboxVisible(): boolean {\n    return this.matSelect.multiple && this.showToggleAllCheckbox;\n  }\n\n  /**\n   * Handles the key down event with MatSelect.\n   * Allows e.g. selecting with enter key, navigation with arrow keys, etc.\n   * @param event\n   */\n  _handleKeydown(event: KeyboardEvent) {\n    // Prevent propagation for all alphanumeric characters in order to avoid selection issues\n    if ((event.key && event.key.length === 1) ||\n      (event.keyCode >= A && event.keyCode <= Z) ||\n      (event.keyCode >= ZERO && event.keyCode <= NINE) ||\n      (event.keyCode === SPACE)\n      || (this.preventHomeEndKeyPropagation && (event.keyCode === HOME || event.keyCode === END))\n    ) {\n      event.stopPropagation();\n    }\n\n    if (this.matSelect.multiple && event.key && event.keyCode === ENTER) {\n      // Regain focus after multiselect, so we can further type\n      setTimeout(() => this._focus());\n    }\n\n    // Special case if click Escape, if input is empty, close the dropdown, if not, empty out the search field\n    if (this.enableClearOnEscapePressed === true && event.keyCode === ESCAPE && this.value) {\n      this._reset(true);\n      event.stopPropagation();\n    }\n  }\n\n  /**\n   * Handles the key up event with MatSelect.\n   * Allows e.g. the announcing of the currently activeDescendant by screen readers.\n   */\n  _handleKeyup(event: KeyboardEvent) {\n    if (event.keyCode === UP_ARROW || event.keyCode === DOWN_ARROW) {\n      const ariaActiveDescendantId = this.matSelect._getAriaActiveDescendant();\n      const index = this._options.toArray().findIndex(item => item.id === ariaActiveDescendantId);\n      if (index !== -1) {\n        const activeDescendant = this._options.toArray()[index];\n        this.liveAnnouncer.announce(\n          activeDescendant.viewValue + ' '\n          + this.getAriaIndex(index)\n          + this.indexAndLengthScreenReaderText\n          + this.getAriaLength()\n        );\n      }\n    }\n  }\n\n  /**\n   * Calculate the index of the current option, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have offset of 1, due to search and will read index of total.\n   *    Case 2 [1, 2, 3] will have offset of 0 and will read index +1 of total.\n   */\n  getAriaIndex(optionIndex: number): number {\n    if (this.getOptionsLengthOffset() === 0) {\n      return optionIndex + 1;\n    }\n    return optionIndex;\n  }\n\n  /**\n   * Calculate the length of the options, taking the offset to length into account.\n   * examples:\n   *    Case 1 [Search, 1, 2, 3] will have length of options.length -1, due to search.\n   *    Case 2 [1, 2, 3] will have length of options.length.\n   */\n  getAriaLength(): number {\n    return this._options.toArray().length - this.getOptionsLengthOffset();\n  }\n\n  writeValue(value: string) {\n    this._lastExternalInputValue = value;\n    this._formControl.setValue(value);\n    this.changeDetectorRef.markForCheck();\n  }\n\n  onBlur() {\n    this.onTouched();\n  }\n\n  registerOnChange(fn: (value: string) => void) {\n    this._formControl.valueChanges.pipe(\n      filter(value => value !== this._lastExternalInputValue),\n      tap(() => this._lastExternalInputValue = undefined),\n      takeUntil(this._onDestroy)\n    ).subscribe(fn);\n  }\n\n  registerOnTouched(fn: Function) {\n    this.onTouched = fn;\n  }\n\n  /**\n   * Focuses the search input field\n   */\n  public _focus() {\n    if (!this.searchSelectInput || !this.matSelect.panel) {\n      return;\n    }\n    // save and restore scrollTop of panel, since it will be reset by focus()\n    // note: this is hacky\n    const panel = this.matSelect.panel.nativeElement;\n    const scrollTop = panel.scrollTop;\n\n    // focus\n    this.searchSelectInput.nativeElement.focus();\n\n    panel.scrollTop = scrollTop;\n  }\n\n  /**\n   * Resets the current search value\n   * @param focus whether to focus after resetting\n   */\n  public _reset(focus?: boolean) {\n    this._formControl.setValue('');\n    if (focus) {\n      this._focus();\n    }\n  }\n\n\n  /**\n   * Initializes handling <mat-select [multiple]=\"true\">\n   * Note: to improve this code, mat-select should be extended to allow disabling resetting the selection while filtering.\n   */\n  private initMultipleHandling() {\n    if (!this.matSelect.ngControl) {\n      if (this.matSelect.multiple) {\n        // note: the access to matSelect.ngControl (instead of matSelect.value / matSelect.valueChanges)\n        // is necessary to properly work in multi-selection mode.\n        console.error('the mat-select containing ngx-mat-select-search must have a ngModel or formControl directive when multiple=true');\n      }\n      return;\n    }\n    // if <mat-select [multiple]=\"true\">\n    // store previously selected values and restore them when they are deselected\n    // because the option is not available while we are currently filtering\n    this.previousSelectedValues = this.matSelect.ngControl.value;\n\n    this.matSelect.ngControl.valueChanges\n      .pipe(takeUntil(this._onDestroy))\n      .subscribe((values) => {\n        let restoreSelectedValues = false;\n        if (this.matSelect.multiple) {\n          if ((this.alwaysRestoreSelectedOptionsMulti || (this._formControl.value && this._formControl.value.length))\n            && this.previousSelectedValues && Array.isArray(this.previousSelectedValues)) {\n            if (!values || !Array.isArray(values)) {\n              values = [];\n            }\n            const optionValues = this.matSelect.options.map(option => option.value);\n            this.previousSelectedValues.forEach(previousValue => {\n              if (!values.some(v => this.matSelect.compareWith(v, previousValue))\n                && !optionValues.some(v => this.matSelect.compareWith(v, previousValue))) {\n                // if a value that was selected before is deselected and not found in the options, it was deselected\n                // due to the filtering, so we restore it.\n                values.push(previousValue);\n                restoreSelectedValues = true;\n              }\n            });\n          }\n        }\n        this.previousSelectedValues = values;\n\n        if (restoreSelectedValues) {\n          this.matSelect._onChange(values);\n        }\n      });\n  }\n\n  /**\n   * Scrolls the currently active option into the view if it is not yet visible.\n   */\n  private adjustScrollTopToFitActiveOptionIntoView(): void {\n    if (this.matSelect.panel && this.matSelect.options.length > 0) {\n      const matOptionHeight = this.getMatOptionHeight();\n      const activeOptionIndex = this.matSelect._keyManager.activeItemIndex || 0;\n      const labelCount = _countGroupLabelsBeforeOption(activeOptionIndex, this.matSelect.options, this.matSelect.optionGroups);\n      // If the component is in a MatOption, the activeItemIndex will be offset by one.\n      const indexOfOptionToFitIntoView = (this.matOption ? -1 : 0) + labelCount + activeOptionIndex;\n      const currentScrollTop = this.matSelect.panel.nativeElement.scrollTop;\n\n      const searchInputHeight = this.innerSelectSearch.nativeElement.offsetHeight;\n      const amountOfVisibleOptions = Math.floor((SELECT_PANEL_MAX_HEIGHT - searchInputHeight) / matOptionHeight);\n\n      const indexOfFirstVisibleOption = Math.round((currentScrollTop + searchInputHeight) / matOptionHeight) - 1;\n\n      if (indexOfFirstVisibleOption >= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = indexOfOptionToFitIntoView * matOptionHeight;\n      } else if (indexOfFirstVisibleOption + amountOfVisibleOptions <= indexOfOptionToFitIntoView) {\n        this.matSelect.panel.nativeElement.scrollTop = (indexOfOptionToFitIntoView + 1) * matOptionHeight\n          - (SELECT_PANEL_MAX_HEIGHT - searchInputHeight);\n      }\n    }\n  }\n\n  /**\n   *  Set the width of the innerSelectSearch to fit even custom scrollbars\n   *  And support all Operation Systems\n   */\n  public updateInputWidth() {\n    if (!this.innerSelectSearch || !this.innerSelectSearch.nativeElement) {\n      return;\n    }\n    let element: HTMLElement = this.innerSelectSearch.nativeElement;\n    let panelElement: HTMLElement;\n    while (element = element.parentElement) {\n      if (element.classList.contains('mat-select-panel')) {\n        panelElement = element;\n        break;\n      }\n    }\n    if (panelElement) {\n      this.innerSelectSearch.nativeElement.style.width = panelElement.clientWidth + 'px';\n    }\n  }\n\n  private getMatOptionHeight(): number {\n    if (this.matSelect.options.length > 0) {\n      return this.matSelect.options.first._getHostElement().getBoundingClientRect().height;\n    }\n\n    return 0;\n  }\n\n  /**\n   * Determine the offset to length that can be caused by the optional matOption used as a search input.\n   */\n  private getOptionsLengthOffset(): number {\n    if (this.matOption) {\n      return 1;\n    } else {\n      return 0;\n    }\n  }\n\n}\n","/**\n * Copyright (c) 2018 Bithost GmbH All Rights Reserved.\n *\n * Use of this source code is governed by an MIT-style license that can be\n * found in the LICENSE file at https://angular.io/license\n */\n\nimport { NgModule } from '@angular/core';\nimport { MatSelectSearchComponent } from './mat-select-search.component';\nimport { MatButtonModule } from '@angular/material/button';\nimport { MatCheckboxModule } from '@angular/material/checkbox';\nimport { MatIconModule } from '@angular/material/icon';\nimport { MatProgressSpinnerModule } from '@angular/material/progress-spinner';\nimport { MatTooltipModule } from '@angular/material/tooltip';\nimport { CommonModule } from '@angular/common';\n\nimport { MatSelectSearchClearDirective } from './mat-select-search-clear.directive';\nimport { ReactiveFormsModule } from '@angular/forms';\n\nexport const MatSelectSearchVersion = '3.3.0';\n\n\n@NgModule({\n  imports: [\n    CommonModule,\n    ReactiveFormsModule,\n    MatButtonModule,\n    MatCheckboxModule,\n    MatIconModule,\n    MatProgressSpinnerModule,\n    MatTooltipModule\n  ],\n  declarations: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ],\n  exports: [\n    MatSelectSearchComponent,\n    MatSelectSearchClearDirective\n  ]\n})\nexport class NgxMatSelectSearchModule { }\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public_api';\n\nexport {MatSelectSearchClearDirective as Éµa} from './mat-select-search-clear.directive';"]}