(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('@angular/core'), require('@angular/forms'), require('@angular/material/autocomplete'), require('@angular/material/input'), require('@angular/material/select'), require('@angular/material/form-field'), require('@angular/platform-browser/animations'), require('@angular/platform-browser')) :
    typeof define === 'function' && define.amd ? define('ngx-mat-autocomplete-control', ['exports', '@angular/core', '@angular/forms', '@angular/material/autocomplete', '@angular/material/input', '@angular/material/select', '@angular/material/form-field', '@angular/platform-browser/animations', '@angular/platform-browser'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global['ngx-mat-autocomplete-control'] = {}, global.ng.core, global.ng.forms, global.ng.material.autocomplete, global.ng.material.input, global.ng.material.select, global.ng.material.formField, global.ng.platformBrowser.animations, global.ng.platformBrowser));
}(this, (function (exports, i0, forms, autocomplete, input, select, formField, animations, platformBrowser) { 'use strict';

    var NgxMatAutocompleteControlService = /** @class */ (function () {
        function NgxMatAutocompleteControlService() {
        }
        return NgxMatAutocompleteControlService;
    }());
    NgxMatAutocompleteControlService.ɵprov = i0.ɵɵdefineInjectable({ factory: function NgxMatAutocompleteControlService_Factory() { return new NgxMatAutocompleteControlService(); }, token: NgxMatAutocompleteControlService, providedIn: "root" });
    NgxMatAutocompleteControlService.decorators = [
        { type: i0.Injectable, args: [{
                    providedIn: 'root'
                },] }
    ];
    NgxMatAutocompleteControlService.ctorParameters = function () { return []; };

    var NgxMatAutocompleteControlComponent = /** @class */ (function () {
        function NgxMatAutocompleteControlComponent() {
            this.appearance = 'outline';
            this.options = [];
            this.required = false;
            this.showDefaultSelect = false;
            this.disabled = false;
            this.showPlaceholder = true;
            // @Input() inputText = '';
            // @Input() reactiveForm = true;
            // @Input() modelName = true;
            this.selectionChange = new i0.EventEmitter();
            this.propValueEvent = new i0.EventEmitter();
            this.keyUp = false;
            this.filterList = [];
        }
        NgxMatAutocompleteControlComponent.prototype.ngOnChanges = function (changes) {
            var _this = this;
            if (changes) {
                if (+this.value > 0 || this.value.length > 0) {
                    this.tempValue = this.control.value;
                    this.setItems('');
                    setTimeout(function () {
                        _this.control.setValue(_this.tempValue);
                    }, 0);
                }
            }
            if (changes && changes.disabled && changes.disabled.currentValue) {
                this.control.disable();
            }
            else {
                this.disabled = false;
                this.control.enable();
            }
        };
        NgxMatAutocompleteControlComponent.prototype.ngOnInit = function () {
            if (this.options) {
                this.setItems('');
            }
        };
        NgxMatAutocompleteControlComponent.prototype.keyUpFunction = function (event, value) {
            var _this = this;
            if (event.key === 'Enter' || event.key === 'Tab') {
                event.preventDefault();
                return false;
            }
            else {
                if (value) {
                    var data = this.filterList.filter(function (e) { return e[_this.refName].toLowerCase() === value.toLowerCase(); });
                    if (data.length > 0) {
                        this.keyUp = true;
                    }
                    else {
                        this.keyUp = true;
                    }
                }
                else {
                    this.keyUp = false;
                }
                this.propValueEvent.emit({
                    propertyName: this.control,
                    // tslint:disable-next-line: object-literal-shorthand
                    value: value
                });
            }
        };
        Object.defineProperty(NgxMatAutocompleteControlComponent.prototype, "displayDataFn", {
            get: function () {
                var _this = this;
                var dataNew = function (data) {
                    if (data == null || data === undefined || data === '') {
                        return null;
                    }
                    else {
                        if (_this.filterList && _this.filterList.length > 0) {
                            data = _this.options.find(function (x) { return x[_this.refId] === data; });
                            if (data) {
                                return data[_this.refName];
                            }
                            else {
                                return null;
                            }
                        }
                        else {
                            return null;
                        }
                    }
                };
                return dataNew;
            },
            enumerable: false,
            configurable: true
        });
        // Resource ..
        NgxMatAutocompleteControlComponent.prototype.setItems = function (value) {
            var _this = this;
            if (!value) {
                this.assignResourceCopy();
            }
            if (value) {
                this.filterList = Object.assign([], this.options).filter(function (item) { return ((item[_this.refName].toLowerCase().indexOf(value.toLowerCase()) > -1)); });
            }
        };
        NgxMatAutocompleteControlComponent.prototype.assignResourceCopy = function () {
            this.filterList = Object.assign([], this.options);
        };
        NgxMatAutocompleteControlComponent.prototype.checkValidValue = function () {
            var value = this.control.value;
            if (value === '' || value == null) {
            }
            else if (this.keyUp) {
                this.control.setErrors({ incorrect: true });
            }
            else {
                this.control.setErrors(null);
            }
        };
        NgxMatAutocompleteControlComponent.prototype.checVal = function (value) {
            var _this = this;
            if (this.showDefaultSelect === false) {
                var data = this.options.filter(function (e) { return e[_this.refName].toLowerCase().trim() ===
                    value.toLowerCase().trim(); });
                if (data.length > 0) {
                    var datax = data[0];
                    this.control
                        .setValue(datax[this.refId]);
                    // this.selectionChange.emit({event:{option:datax[this.refId]}});
                    this.keyUp = false;
                }
                this.checkValidValue();
            }
        };
        NgxMatAutocompleteControlComponent.prototype.emitValues = function (event) {
            this.selectionChange.emit(event.option.value);
            this.propValueEvent.emit({
                propertyName: this.control,
                value: event.option.value
            });
        };
        return NgxMatAutocompleteControlComponent;
    }());
    NgxMatAutocompleteControlComponent.decorators = [
        { type: i0.Component, args: [{
                    selector: 'ngx-mat-autocomplete-control',
                    template: "  <mat-form-field [appearance]=\"appearance\" style=\"width: 100%;\">\r\n    <mat-label>{{label}} </mat-label>\r\n    <input #inputvalue  matInput [placeholder]=\"showPlaceholder?label:''\" \r\n     [matAutocomplete]=\"autoCmpt\" [formControl]=\"control\" \r\n      (focus)=\"setItems(inputvalue.value)\" (keypress)=\"keyUpFunction($event, inputvalue.value)\"\r\n      (input)=\"setItems(inputvalue.value)\"\r\n       (blur)=\"checVal(inputvalue.value);\" (click)=\"inputvalue.select()\"\r\n      [required]=\"required\" />\r\n  \r\n    <mat-error *ngIf=\"control?.errors?.required && required\">\r\n      {{label}} is required\r\n    </mat-error>\r\n    <mat-error *ngIf=\"control?.errors?.incorrect\">\r\n      {{label}} is not valid.\r\n    </mat-error>\r\n  \r\n    <mat-autocomplete #autoCmpt=\"matAutocomplete\" [displayWith]=\"displayDataFn\"\r\n     (optionSelected)=\"emitValues($event)\">\r\n      <!-- <mat-option>-------Select {{label}}-------</mat-option> -->\r\n      <mat-option [value]=\"data[refId]\" *ngFor=\"let data of filterList\" class=\"autocom-option autocom-tr\">\r\n        <span [innerHTML]=\"data[refName] | highlight: inputvalue.value \"></span>\r\n      </mat-option>\r\n      <mat-option *ngIf=\"filterList.length == 0\">\r\n        <div class=\"no-record\"><span>No Data Found</span></div>\r\n      </mat-option>\r\n    </mat-autocomplete>\r\n  \r\n  </mat-form-field>",
                    styles: [".no-record{color:#78797b;font-size:14px;font-weight:300;line-height:.5;margin:.5rem 0;padding:30px 20px}.no-record span:after,.no-record span:before{border-bottom:1px solid rgba(0,0,0,.1);border-top:1px solid rgba(0,0,0,.1);content:\"\";display:inline-block;height:3px;position:relative;top:-2px;width:20px}.no-record span:before{margin-right:5px}.no-record span:after{margin-left:5px}.mat-option-text b{color:#3f51b5}"]
                },] }
    ];
    NgxMatAutocompleteControlComponent.ctorParameters = function () { return []; };
    NgxMatAutocompleteControlComponent.propDecorators = {
        control: [{ type: i0.Input }],
        refId: [{ type: i0.Input }],
        refName: [{ type: i0.Input }],
        label: [{ type: i0.Input }],
        appearance: [{ type: i0.Input }],
        options: [{ type: i0.Input }],
        required: [{ type: i0.Input }],
        showDefaultSelect: [{ type: i0.Input }],
        disabled: [{ type: i0.Input }],
        value: [{ type: i0.Input }],
        showPlaceholder: [{ type: i0.Input }],
        selectionChange: [{ type: i0.Output }],
        propValueEvent: [{ type: i0.Output }]
    };

    var HighlightPipe = /** @class */ (function () {
        function HighlightPipe(sanitizer) {
            this.sanitizer = sanitizer;
        }
        HighlightPipe.prototype.transform = function (text, search) {
            if (search && text) {
                var pattern = search.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g, '\\$&');
                pattern = pattern.split(' ').filter(function (t) {
                    return t.length > 0;
                }).join('|');
                var regex = new RegExp(pattern, 'gi');
                return this.sanitizer.bypassSecurityTrustHtml(String(text).replace(regex, function (match) { return "<b>" + match + "</b>"; }));
            }
            else {
                return text;
            }
        };
        return HighlightPipe;
    }());
    HighlightPipe.decorators = [
        { type: i0.Pipe, args: [{
                    name: 'highlight'
                },] }
    ];
    HighlightPipe.ctorParameters = function () { return [
        { type: platformBrowser.DomSanitizer }
    ]; };

    var NgxMatAutocompleteControlModule = /** @class */ (function () {
        function NgxMatAutocompleteControlModule() {
        }
        return NgxMatAutocompleteControlModule;
    }());
    NgxMatAutocompleteControlModule.decorators = [
        { type: i0.NgModule, args: [{
                    declarations: [NgxMatAutocompleteControlComponent, HighlightPipe],
                    imports: [
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        autocomplete.MatAutocompleteModule,
                        input.MatInputModule,
                        select.MatSelectModule,
                        formField.MatFormFieldModule,
                        animations.BrowserAnimationsModule
                    ],
                    exports: [NgxMatAutocompleteControlComponent,
                        forms.FormsModule,
                        forms.ReactiveFormsModule,
                        autocomplete.MatAutocompleteModule,
                        input.MatInputModule,
                        select.MatSelectModule,
                        formField.MatFormFieldModule,
                        animations.BrowserAnimationsModule]
                },] }
    ];

    /*
     * Public API Surface of ngx-mat-autocomplete-control
     */

    /**
     * Generated bundle index. Do not edit.
     */

    exports.NgxMatAutocompleteControlComponent = NgxMatAutocompleteControlComponent;
    exports.NgxMatAutocompleteControlModule = NgxMatAutocompleteControlModule;
    exports.NgxMatAutocompleteControlService = NgxMatAutocompleteControlService;
    exports.ɵa = HighlightPipe;

    Object.defineProperty(exports, '__esModule', { value: true });

})));
//# sourceMappingURL=ngx-mat-autocomplete-control.umd.js.map
