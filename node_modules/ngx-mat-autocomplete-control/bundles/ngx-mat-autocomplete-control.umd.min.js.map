{"version":3,"sources":["../../projects/ngx-mat-autocomplete-control/src/lib/ngx-mat-autocomplete-control.service.ts","../../projects/ngx-mat-autocomplete-control/src/lib/ngx-mat-autocomplete-control.component.ts","../../projects/ngx-mat-autocomplete-control/src/lib/highlight.pipe.ts","../../projects/ngx-mat-autocomplete-control/src/lib/ngx-mat-autocomplete-control.module.ts"],"names":["Injectable","args","providedIn","NgxMatAutocompleteControlComponent","this","appearance","options","required","showDefaultSelect","disabled","showPlaceholder","selectionChange","EventEmitter","propValueEvent","keyUp","filterList","prototype","ngOnChanges","changes","_this","value","length","tempValue","control","setItems","setTimeout","setValue","currentValue","disable","enable","ngOnInit","keyUpFunction","event","key","preventDefault","filter","e","refName","toLowerCase","emit","propertyName","Object","defineProperty","data","undefined","find","x","refId","assignResourceCopy","assign","item","indexOf","checkValidValue","setErrors","incorrect","checVal","trim","datax","emitValues","option","Component","selector","template","Input","Output","HighlightPipe","sanitizer","transform","text","search","pattern","replace","split","t","join","regex","RegExp","bypassSecurityTrustHtml","String","match","Pipe","name","DomSanitizer","NgModule","declarations","imports","FormsModule","ReactiveFormsModule","MatAutocompleteModule","MatInputModule","MatSelectModule","MatFormFieldModule","BrowserAnimationsModule","exports"],"mappings":"49BAOE,4HALDA,EAAAA,WAAUC,KAAA,CAAC,CACVC,WAAY,kECyBZ,SAAAC,IAhBSC,KAAAC,WAAa,UACbD,KAAAE,QAAU,GACVF,KAAAG,UAAW,EACXH,KAAAI,mBAAoB,EACpBJ,KAAAK,UAAW,EAEXL,KAAAM,iBAAkB,EAKjBN,KAAAO,gBAAkB,IAAIC,EAAAA,aACtBR,KAAAS,eAAiB,IAAID,EAAAA,aAC/BR,KAAAU,OAAQ,EACRV,KAAAW,WAAa,UAIbZ,EAAAa,UAAAC,YAAA,SAAYC,GAAZ,IAAAC,EAAAf,KACMc,KACGd,KAAKgB,MAAQ,GAAKhB,KAAKgB,MAAMC,OAAS,KACzCjB,KAAKkB,UAAYlB,KAAKmB,QAAQH,MAC9BhB,KAAKoB,SAAS,IACdC,YAAW,WACTN,EAAKI,QAAQG,SAASP,EAAKG,aAC1B,IAIHJ,GAAWA,EAAQT,UAAYS,EAAQT,SAASkB,aAClDvB,KAAKmB,QAAQK,WAEbxB,KAAKK,UAAW,EAChBL,KAAKmB,QAAQM,WAIjB1B,EAAAa,UAAAc,SAAA,WACM1B,KAAKE,SACPF,KAAKoB,SAAS,KAGlBrB,EAAAa,UAAAe,cAAA,SAAcC,EAAOZ,GAArB,IAAAD,EAAAf,KACE,GAAkB,UAAd4B,EAAMC,KAAiC,QAAdD,EAAMC,IAEjC,OADAD,EAAME,kBACC,EAEHd,GACWhB,KAAKW,WAAWoB,QAAO,SAAAC,GAClC,OAAAA,EAAEjB,EAAKkB,SAASC,gBAAkBlB,EAAMkB,iBACjCjB,OACPjB,KAAKU,OAAQ,GAKfV,KAAKU,OAAQ,EAEfV,KAAKS,eAAe0B,KAAK,CACvBC,aAAcpC,KAAKmB,QAEnBH,MAAOA,KAIbqB,OAAAC,eAAIvC,EAAAa,UAAA,gBAAa,KAAjB,WAAA,IAAAG,EAAAf,KAiBE,OAhBgB,SAACuC,GACf,OAAY,MAARA,QAAyBC,IAATD,GAA+B,KAATA,EACjC,KAEHxB,EAAKJ,YAAcI,EAAKJ,WAAWM,OAAS,IAC9CsB,EAAOxB,EAAKb,QAAQuC,MAAK,SAAAC,GAAK,OAAAA,EAAE3B,EAAK4B,SAAWJ,MAEvCA,EAAKxB,EAAKkB,SAKZ,uCAOflC,EAAAa,UAAAQ,SAAA,SAASJ,GAAT,IAAAD,EAAAf,KACOgB,GAAShB,KAAK4C,qBACf5B,IACFhB,KAAKW,WAAa0B,OAAOQ,OAAO,GAAI7C,KAAKE,SAAS6B,QAChD,SAAAe,GAAQ,OAAEA,EAAK/B,EAAKkB,SAASC,cAAca,QAAQ/B,EAAMkB,gBAAkB,OAIjFnC,EAAAa,UAAAgC,mBAAA,WACE5C,KAAKW,WAAa0B,OAAOQ,OAAO,GAAI7C,KAAKE,UAG3CH,EAAAa,UAAAoC,gBAAA,WACE,IAAMhC,EAAQhB,KAAKmB,QAAQH,MACb,KAAVA,GAAyB,MAATA,IACThB,KAAKU,MACdV,KAAKmB,QAAQ8B,UAAU,CAAEC,WAAW,IAEpClD,KAAKmB,QAAQ8B,UAAU,QAI3BlD,EAAAa,UAAAuC,QAAA,SAAQnC,GAAR,IAAAD,EAAAf,KACE,IAA+B,IAA3BA,KAAKI,kBAA6B,CACpC,IAAMmC,EAAYvC,KAAKE,QAAQ6B,QAAO,SAAAC,GAAK,OAAAA,EAAEjB,EAAKkB,SAASC,cAAckB,SACvEpC,EAAMkB,cAAckB,UACtB,GAAIb,EAAKtB,OAAS,EAAG,CACnB,IAAMoC,EAAQd,EAAK,GACnBvC,KAAKmB,QACFG,SAAS+B,EAAMrD,KAAK2C,QAEvB3C,KAAKU,OAAQ,EAEfV,KAAKgD,oBAGTjD,EAAAa,UAAA0C,WAAA,SAAW1B,GACT5B,KAAKO,gBAAgB4B,KAAKP,EAAM2B,OAAOvC,OACvChB,KAAKS,eAAe0B,KAAK,CACvBC,aAAcpC,KAAKmB,QACnBH,MAAOY,EAAM2B,OAAOvC,kCAvIzBwC,EAAAA,UAAS3D,KAAA,CAAC,CACT4D,SAAU,+BACVC,SAAA,80DAICC,EAAAA,qBACAA,EAAAA,uBACAA,EAAAA,qBACAA,EAAAA,0BACAA,EAAAA,uBACAA,EAAAA,wBACAA,EAAAA,iCACAA,EAAAA,wBACAA,EAAAA,qBACAA,EAAAA,+BACAA,EAAAA,+BAKAC,EAAAA,+BACAA,EAAAA,2BCjBD,SAAAC,EAAmBC,GAAA9D,KAAA8D,UAAAA,SAEnBD,EAAAjD,UAAAmD,UAAA,SAAUC,EAAcC,GACtB,GAAIA,GAAUD,EAAM,CAClB,IAAIE,EAAUD,EAAOE,QAAQ,sCAAuC,QACpED,EAAUA,EAAQE,MAAM,KAAKrC,QAAO,SAACsC,GACnC,OAAOA,EAAEpD,OAAS,KACjBqD,KAAK,KACR,IAAMC,EAAQ,IAAIC,OAAON,EAAS,MAClC,OAAOlE,KAAK8D,UAAUW,wBACpBC,OAAOV,GAAMG,QAAQI,GAAO,SAACI,GAAU,MAAA,MAAMA,EAAK,WAIpD,OAAOX,4BAlBZY,EAAAA,KAAI/E,KAAA,CAAC,CACJgF,KAAM,yDAHCC,EAAAA,sBC6BT,iCApBCC,EAAAA,SAAQlF,KAAA,CAAC,CACRmF,aAAc,CAACjF,EAAoC8D,GACnDoB,QAAS,CACPC,EAAAA,YACAC,EAAAA,oBACAC,EAAAA,sBACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,mBACAC,EAAAA,yBAEFC,QAAS,CAAC1F,EACRmF,EAAAA,YACAC,EAAAA,oBACAC,EAAAA,sBACAC,EAAAA,eACAC,EAAAA,gBACAC,EAAAA,mBACAC,EAAAA","sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class NgxMatAutocompleteControlService {\n\n  constructor() { }\n}\n","import { Component, OnInit, OnChanges, Input, Output, EventEmitter, SimpleChanges } from '@angular/core';\nimport { FormControl } from '@angular/forms';\n@Component({\n  selector: 'ngx-mat-autocomplete-control',\n  templateUrl: './autocomplete.html',\n  styleUrls: ['./autocomplete.css']\n})\nexport class NgxMatAutocompleteControlComponent implements OnInit, OnChanges {\n  @Input() control: FormControl;\n  @Input() refId: string;\n  @Input() refName: string;\n  @Input() label: string;\n  @Input() appearance = 'outline';\n  @Input() options = [];\n  @Input() required = false;\n  @Input() showDefaultSelect = false;\n  @Input() disabled = false;\n  @Input() value: any;\n  @Input() showPlaceholder = true; \n  // @Input() inputText = '';\n  // @Input() reactiveForm = true;\n  // @Input() modelName = true;\n\n  @Output() selectionChange = new EventEmitter<any>();\n  @Output() propValueEvent = new EventEmitter<any>();\n  keyUp = false;\n  filterList = [];\n  tempValue: any;\n  constructor() {\n  }\n  ngOnChanges(changes: SimpleChanges): void {\n    if (changes) {\n      if (+this.value > 0 || this.value.length > 0) {\n        this.tempValue = this.control.value;\n        this.setItems('');\n        setTimeout(() => {\n          this.control.setValue(this.tempValue);\n        }, 0);\n      }\n\n    }\n    if (changes && changes.disabled && changes.disabled.currentValue) {\n      this.control.disable();\n    } else {\n      this.disabled = false;\n      this.control.enable();\n\n    }\n  }\n  ngOnInit() {\n    if (this.options) {\n      this.setItems('');\n    }\n  }\n  keyUpFunction(event, value) {\n    if (event.key === 'Enter' || event.key === 'Tab') {\n      event.preventDefault();\n      return false;\n    } else {\n      if (value) {\n        const data = this.filterList.filter(e =>\n          e[this.refName].toLowerCase() === value.toLowerCase());\n        if (data.length > 0) {\n          this.keyUp = true;\n        } else {\n          this.keyUp = true;\n        }\n      } else {\n        this.keyUp = false;\n      }\n      this.propValueEvent.emit({\n        propertyName: this.control,\n        // tslint:disable-next-line: object-literal-shorthand\n        value: value\n      });\n    }\n  }\n  get displayDataFn() {\n    const dataNew = (data) => {\n      if (data == null || data === undefined || data === '') {\n        return null;\n      } else {\n        if (this.filterList && this.filterList.length > 0) {\n          data = this.options.find(x => x[this.refId] === data);\n          if (data) {\n            return data[this.refName];\n          } else {\n            return null;\n          }\n        } else {\n          return null;\n        }\n      }\n    };\n    return dataNew;\n  }\n  // Resource ..\n  setItems(value) {\n    if (!value) { this.assignResourceCopy(); }\n    if (value) {\n      this.filterList = Object.assign([], this.options).filter(\n        item => ((item[this.refName].toLowerCase().indexOf(value.toLowerCase()) > -1)));\n    }\n\n  }\n  assignResourceCopy() {\n    this.filterList = Object.assign([], this.options);\n  }\n\n  checkValidValue() {\n    const value = this.control.value;\n    if (value === '' || value == null) {\n    } else if (this.keyUp) {\n      this.control.setErrors({ incorrect: true });\n    } else {\n      this.control.setErrors(null);\n    }\n  }\n\n  checVal(value) {\n    if (this.showDefaultSelect === false) {\n      const data: any = this.options.filter(e => e[this.refName].toLowerCase().trim() ===\n        value.toLowerCase().trim());\n      if (data.length > 0) {\n        const datax = data[0];\n        this.control\n          .setValue(datax[this.refId]);\n        // this.selectionChange.emit({event:{option:datax[this.refId]}});\n        this.keyUp = false;\n      }\n      this.checkValidValue();\n    }\n  }\n  emitValues(event) {\n    this.selectionChange.emit(event.option.value);\n    this.propValueEvent.emit({\n      propertyName: this.control,\n      value: event.option.value\n    });\n  }\n}","import { PipeTransform, Pipe } from '@angular/core';\nimport { DomSanitizer, SafeHtml } from '@angular/platform-browser';\n\n@Pipe({\n  name: 'highlight'\n})\nexport class HighlightPipe implements PipeTransform {\n  constructor(public sanitizer: DomSanitizer) {\n  }\n  transform(text: string, search): SafeHtml {\n    if (search && text) {\n      let pattern = search.replace(/[\\-\\[\\]\\/\\{\\}\\(\\)\\*\\+\\?\\.\\\\\\^\\$\\|]/g, '\\\\$&');\n      pattern = pattern.split(' ').filter((t) => {\n        return t.length > 0;\n      }).join('|');\n      const regex = new RegExp(pattern, 'gi');\n      return this.sanitizer.bypassSecurityTrustHtml(\n        String(text).replace(regex, (match) => `<b>${match}</b>`)\n      );\n\n    } else {\n      return text;\n    }\n  }\n}\n","import { NgModule } from '@angular/core';\nimport { NgxMatAutocompleteControlComponent } from './ngx-mat-autocomplete-control.component';\nimport { FormsModule, ReactiveFormsModule } from '@angular/forms';\nimport { MatAutocompleteModule } from '@angular/material/autocomplete';\nimport { MatInputModule } from '@angular/material/input';\nimport { MatSelectModule } from '@angular/material/select';\nimport { MatFormFieldModule } from '@angular/material/form-field';\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\nimport { HighlightPipe } from './highlight.pipe';\n\n@NgModule({\n  declarations: [NgxMatAutocompleteControlComponent, HighlightPipe],\n  imports: [\n    FormsModule,\n    ReactiveFormsModule,\n    MatAutocompleteModule,\n    MatInputModule,\n    MatSelectModule,\n    MatFormFieldModule,\n    BrowserAnimationsModule\n  ],\n  exports: [NgxMatAutocompleteControlComponent,\n    FormsModule,\n    ReactiveFormsModule,\n    MatAutocompleteModule,\n    MatInputModule,\n    MatSelectModule,\n    MatFormFieldModule,\n    BrowserAnimationsModule]\n})\nexport class NgxMatAutocompleteControlModule { }\n"]}